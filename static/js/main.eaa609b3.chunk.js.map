{"version":3,"sources":["serviceWorker.js","CompJumbotron/CompJumbotron.jsx","Home-Pages/Home.jsx","ComponentNavbar/CompNavbar.jsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","BoxComponent","id","Row","Col","lg","sm","Card","body","className","color","animation","size","name","type","Button","CompJumbotron","Jumbotron","col","Container","React","Component","CompHome","CompNavbar","props","useState","isOpen","setIsOpen","Navbar","dark","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","NavLink","to","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","divider","component","ReactDOM","render","StrictMode","path","exact","Componentss","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.eaa609b3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport 'boxicons'\r\nimport { Alert, Jumbotron, Button, Container, Row, Col, Card, CardTitle, CardText } from 'reactstrap';\r\n\r\n\r\n\r\n\r\nconst BoxComponent = () => {\r\n  return (\r\n    <div id=\"CompBoxJumbotrons\">\r\n      <Row >\r\n\r\n        <Col lg=\"3\" sm=\"6\" >\r\n          <Card id=\"CardCompBoxIcon\" body>\r\n            <div className=\"text-center\">\r\n              <box-icon color=\"red\" animation=\"tada\" size=\"lg\" name='html5' type='logo' ></box-icon>\r\n            </div>\r\n            <Button>HTML</Button>\r\n          </Card>\r\n        </Col>\r\n        <Col lg=\"3\" sm=\"6\">\r\n          <Card id=\"CardCompBoxIcon\" body>\r\n            <div className=\"text-center\">\r\n              <box-icon color=\"blue\" animation=\"tada\" size=\"lg\" name='css3' type='logo' ></box-icon>\r\n            </div>\r\n            <Button>CSS</Button>\r\n          </Card>\r\n        </Col>\r\n        <Col lg=\"3\" sm=\"6\">\r\n          <Card id=\"CardCompBoxIcon\" body>\r\n            <div className=\"text-center\">\r\n              <box-icon color=\"yellowgreen\" animation=\"tada\" size=\"lg\" name='javascript' type='logo' ></box-icon>\r\n            </div>\r\n            <Button>JAVASCRIPT</Button>\r\n          </Card>\r\n        </Col>\r\n        <Col lg=\"3\" sm=\"6\">\r\n          <Card id=\"CardCompBoxIcon\" body>\r\n            <div className=\"text-center\">\r\n              <box-icon color=\"purple\" animation=\"tada\" size=\"lg\" name='bootstrap' type='logo' ></box-icon>\r\n            </div>\r\n            <Button>BOOTSTRAP</Button>\r\n          </Card>\r\n        </Col>\r\n\r\n      </Row>\r\n    </div >\r\n  )\r\n\r\n}\r\n\r\nclass CompJumbotron extends React.Component {\r\n  render() {\r\n    return (\r\n\r\n\r\n      <Jumbotron id=\"CompJumbotron\" className=\"d-flex justify-content-center align-items-center flex-column\">\r\n\r\n        <Row>\r\n          <Col col=\"md-12\">\r\n            <h1 className=\"font-weight-bold text-white\">Belajar Budi Daya Code Bersama DeveloperKids</h1>\r\n            <hr className=\"my-2 mt-3\" color=\"text-primary\" />\r\n            <p className=\"lead\">Jangan tunggu nanti, tanamlah sekarang biar cepat panen!</p>\r\n            <p className=\"lead\">\r\n              <Button className=\"border-fuchsia\">Learn More!</Button>\r\n            </p>\r\n          </Col>\r\n\r\n        </Row>\r\n        <Container className=\"mt-5\">\r\n          <BoxComponent />\r\n        </Container>\r\n      </Jumbotron>\r\n\r\n\r\n\r\n\r\n    )\r\n  }\r\n}\r\n\r\nexport default CompJumbotron;","import React, { Fragment } from 'react';\r\nimport CompJumbotron from '../CompJumbotron/CompJumbotron'\r\n\r\n\r\n\r\n\r\n\r\nclass CompHome extends React.Component {\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <CompJumbotron />\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CompHome;","import React, { useState } from 'react';\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  NavbarText, Container\r\n} from 'reactstrap';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link, BrowserRouter\r\n} from \"react-router-dom\";\r\n\r\n\r\n\r\nconst CompNavbar = (props) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  return (\r\n\r\n    <Navbar color=\"primary\" dark expand=\"md\" id=\"Navbar\">\r\n      <Container>\r\n        <NavbarBrand id=\"NavbarBrand\" href=\"/hello\">DeveloperKids</NavbarBrand>\r\n        <NavbarToggler onClick={toggle} />\r\n        <Collapse isOpen={isOpen} navbar>\r\n          <Nav className=\"ml-auto \" navbar>\r\n            <NavItem>\r\n              <NavLink>\r\n                <Link id=\"Link\" to=\"/hello\">Home</Link>\r\n              </NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink>\r\n                <Link id=\"Link\" to=\"/tentang-kami\">TentangKami</Link>\r\n              </NavLink>\r\n            </NavItem>\r\n            <UncontrolledDropdown nav inNavbar>\r\n              <DropdownToggle nav caret>\r\n                Tutorial\r\n              </DropdownToggle>\r\n              <DropdownMenu right>\r\n                <DropdownItem>\r\n                  <Link to=\"/list-learn-html\">HTML</Link>\r\n                </DropdownItem>\r\n                <DropdownItem divider />\r\n                <DropdownItem>\r\n                  <Link to=\"/list-learn-css\">CSS</Link>\r\n                </DropdownItem>\r\n                <DropdownItem divider />\r\n                <DropdownItem>\r\n                  <Link to=\"/list-learn-javascript\">JAVASCRIPT</Link>\r\n                </DropdownItem>\r\n                <DropdownItem divider />\r\n              </DropdownMenu>\r\n            </UncontrolledDropdown>\r\n          </Nav>\r\n\r\n        </Collapse>\r\n      </Container>\r\n    </Navbar>\r\n\r\n  );\r\n}\r\n\r\nexport default CompNavbar;","import React from 'react';\nimport { Button } from 'reactstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass component extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1>HELLO WORLD</h1>\n        <Button color=\"danger\">Danger!</Button>\n      </div>\n    )\n\n  }\n}\nexport default component;","import React, { Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './style/style.css';\nimport * as serviceWorker from './serviceWorker';\nimport CompHomes from './Home-Pages/Home';\nimport CompNavbars from './ComponentNavbar/CompNavbar';\nimport Componentss from './App';\nimport { Button, Jumbotron } from 'reactstrap';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link, BrowserRouter\n} from \"react-router-dom\";\nimport CompHome from './Home-Pages/Home';\nimport component from './App';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Fragment>\n        <div>\n          < CompNavbars />\n        </div>\n        <Route path=\"/hello\" exact component={CompHome} />\n\n        <Route path=\"/component\" component={Componentss} />\n\n\n      </Fragment>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}